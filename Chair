import os
from time import time
import cv2
from cv2 import mean
from matplotlib import pyplot as plt

import numpy as np
from deepface import DeepFace
import pandas as pd

from objectDetection import Detector



def getSample(camera: cv2.VideoCapture, n_samples = 5) -> list[np.array]:
    assert camera.isOpened, 'The camera is not active'
    samples = []
    while len(samples)< n_samples :
        success,frame = camera.read()
        if success : samples.append(np.array(frame))
        time.sleep(1)
    return samples

def get_group_id(identity: str) -> str:
    splitted_str = identity.split('_')
    return f'{splitted_str[1]}_{splitted_str[3]}'

def thresholdMatches(listOfMatch: list[pd.DataFrame], threshold = 0.9, n_required = 3) -> bool:
    return any(match.at['score',n_required]>threshold for match in listOfMatch)




    
    


class Chair:
    def __init__(self, AREA: list[int], id: int) -> None:
        self.AREA = AREA
        self.isOccupied = False
        self.timeSinceLastChanged = time() # Have it in seconds
        self.timeSinceLastStoreFace = time()
        self.FACE_STORAGE_FREQUENCY = 2
        self.image = np.array
        self.id = id
        self.customerID = 0
    
    def _changeState(self):
        self.timeSinceLastChanged = time()
        self.isOccupied =  not self.isOccupied

    def _newCustomer(self): # potentially
        self.customerID+=1  




    def _checkNewCustomer(self, camera: cv2.VideoCapture)- -> bool:
        '''
        Check if the person seated is a new customer.
        Number of iterCheck : NumberOfSample^2
        '''

        #TODO penser Ã  supprimer les images au bout d'1h30

        samples = getSample(camera)
        matchingImg = DeepFace.find(img_path= samples,db_path='storedFace',model_name='Facenet512',detector_backend='retinaface',prog_bar=False)
        sizeOfMatchList = len(matchingImg)
        return False if sizeOfMatchList==0 else thresholdMatches(matchingImg)


    def _storeFace(self):
        face = DeepFace.detectFace(self.image, target_size = (224, 224), detector_backend = 'retinaface')
        plt.imsave(fname = f'storedFace/chair_{self.id}_customer_{self.customerID}.jpg', arr= face)
        self.timeSinceLastStoreFace = time()


    def update(self, camera:cv2.VideoCapture, detector:Detector):
        ret, img = camera.read()
        if ret :
            self.image = img.to_array()[self.AREA[0],self.AREA[1],self.AREA[2],self.AREA[3]] # Must be numpy

            stateChanged = (self.isOccupied == detector.evaluate(img))
            timeToStore = (self.timeSinceLastStoreFace> 1./self.FACE_STORAGE_FREQUENCY)

            if not stateChanged and timeToStore and self.isOccupied:
                # If the seat stays occupied
                self._storeFace()
            elif stateChanged:
                self._changeState()
                if self.isOccupied and self._checkNewCustomer(camera):
                    self._newCustomer()

            





    
